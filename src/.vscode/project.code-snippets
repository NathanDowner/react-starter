{
  // Place your unbank-reactapp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Scaffold Api hook file": {
    "scope": "typescript",
    "prefix": "apiu",
    "body": [
      "import { OnSuccessCallback, useUpdateApi } from 'common/hooks';",
      "import { axios } from 'lib/axios';",
      "",
      "export type ${1:DataTransferObjectType} = {",
      "  $2",
      "};",
      "",
      "const $TM_FILENAME_BASE = async (credentials: $1) => {",
      "const resp = await axios.post<${3:ApiResponseType}>('/api/${4:path}', {",
      "  ...credentials,",
      "});",
      "  return resp.data;",
      "};",
      "",
      "export const use${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} = (onSuccess: OnSuccessCallback<$3>) => {",
      "  return useUpdateApi($TM_FILENAME_BASE , { onSuccess });",
      "};"
    ],
    "description": "Create api hook for a post put or delete"
  },

  "Initialize useFormik hook": {
    "scope": "typescriptreact",
    "prefix": "frmk",
    "body": [
      "const { errors, touched, ...formik } = useFormik<${1:FormDataType}>({",
      "initialValues: {",
      "$2",
      "},",
      "validationSchema: Yup.object({",
      "$3",
      "}),",
      "onSubmit: (values) => {",
      "$4",
      "}",
      "});"
    ],
    "description": "Initialize useFormik hook"
  },

  "Scaffold get api hook file": {
    "scope": "typescript",
    "prefix": "apig, apif",
    "body": [
      "import { useFetchApi } from 'common/hooks';",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}DTO = {",
      "  $1",
      "};",
      "",
      "export const use${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} = ({$2}: ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}DTO) => {",
      "  useFetchApi<$3>(`/api/${4:path}`);",
      "}"
    ],
    "description": "Create api hook for a get request"
  }
}
